---
title: "Avant-propos"
format: revealjs
editor: visual
---

```{r}

```

## Quarto

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

## Bullets

When you click the **Render** button a document will be generated that includes:

-   Content authored with markdown
-   Output from executable code

## Code

```{r}
#1 
matrix(c(1,2),3,4)
```

::: notes
:::

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
#2
diag(1,4,4)
```

```{r}
diag(c(1,1,1,1))
```

```{r}
a<-matrix(c(1,2),4,4)
b<-matrix(c(1,3),4,4)
```

```{r}
# Calcul de la diagonale
diag_a <- diag(a)
diag_b <- diag(b)
```

```{r}
# Calcul de la trace
trace_a <- sum(diag_a)
trace_b <- sum(diag_b)
```

```{r}
a %*% b
```

```{r}
a*b 
```

```{r}
library("MASS")
```

```{r}

X <- mvrnorm(100, mu = c(1, 3), Sigma = matrix(c(2^2, 0, 0, 0.5^2), 2, 2))
Y <- mvrnorm(100, mu = c(3, 4), Sigma = matrix(c(0.7^2, 0, 0, 0.9^2), 2, 2))
```

```{r}
# Affichage des résultats
print("Trace de la matrice a :")
print(trace_a)

print("Trace de la matrice b :")
print(trace_b)
```

`{library(MASS)}`

```         
```

::: notes
Le produit %\*% est le produit matricielle alors que le produit \* est le produit classique qui multiplie élément par élément correspondant .
:::

```{r}
X <- mvrnorm(100, mu = c(1, 3), Sigma = matrix(c(2^2, 0, 0, 0.5^2), 2, 2))
Y <- mvrnorm(100, mu = c(3, 4), Sigma = matrix(c(0.7^2, 0, 0, 0.9^2), 2, 2))
```

```{r}
plot(X, col = "red")
points(Y, col = "green")


```

```         
```

```{r}
# Définitiond de la distance 
distanceMat <- function(x, y, M) {
  diff <- x - y                      # Calcul de la différence entre x et y
  distance <- sqrt(t(diff) %*% M %*% diff)  # Appliquer la formule
  return(as.numeric(distance))       # Retourner le résultat sous forme numérique
}

```

```{r}
M <- diag(2)  # Matrice identité 2x2

# Prenons deux points simples de X et Y
x_test <- X[2, ]
y_test <- Y[1, ]

# Calculons la distance
distance_test <- distanceMat(x_test, y_test, M)
```

```{r}
print(x_test)
print(y_test)

```

`{print(distance_test)  # Affiche la distance calculée}`

```{r}
euclidean_distance <- sqrt(sum((x_test - y_test)^2))
print(euclidean_distance)


```

```{r}
```

```{r}

```

```{# Calculer la distance euclidienne}
euclidean_distance <- sqrt(sum((x_test - y_test)^2))
print("Distance Euclidienne :")
print(euclidean_distance)

```

```         
```

```{r}
# Charger la bibliothèque MASS pour générer des données aléatoires multidimensionnelles
library(MASS)

# Génération des données X et Y
X <- mvrnorm(100, mu = c(1, 3), Sigma = matrix(c(2^2, 0, 0, 0.5^2), 2, 2))
Y <- mvrnorm(100, mu = c(3, 4), Sigma = matrix(c(0.7^2, 0, 0, 0.9^2), 2, 2))

# Définir la fonction pour calculer la distance de Mahalanobis
distanceMat <- function(x, y, M) {
  diff <- x - y                      # Calcul de la différence entre x et y
  distance <- sqrt(t(diff) %*% M %*% diff)  # Appliquer la formule
  return(as.numeric(distance))       # Retourner le résultat sous forme numérique
}

# Définir la fonction pour calculer l'inertie du nuage de points
inertie <- function(X, M) {
  n <- nrow(X)                         # Nombre de points dans le nuage
  centre <- colMeans(X)                # Calcul du centre de gravité
  distances <- apply(X, 1, function(x) distanceMat(x, centre, M))  # Distance de chaque point au centre
  return(sum(distances^2) / n)         # Inertie : somme des distances au carré, divisée par le nombre de points
}

# Calcul de l'inertie avec la distance Euclidienne (M = Id)
M_identity <- diag(2)  # Matrice identité pour la distance Euclidienne
inertie_euclidienne <- inertie(X, M_identity)
print("Inertie avec la distance Euclidienne :")
print(inertie_euclidienne)

# Matrice de variance-covariance pour X
Sigma <- matrix(c(2^2, 0, 0, 0.5^2), 2, 2)
M_sigma <- solve(Sigma)  # Inverse de la matrice de variance-covariance

# Calcul de l'inertie avec la métrique M = σ⁻²
inertie_mahalanobis <- inertie(X, M_sigma)
print("Inertie avec la distance de Mahalanobis (M = σ⁻²) :")
print(inertie_mahalanobis)


```

```{r}


```
